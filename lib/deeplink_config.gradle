import java.util.regex.Pattern


ext.generateData = { clientId, host ->
    String links = ""
    try {
        clientId.each { item ->
            links += data(item, host)
        }
    } catch (Exception e) {
        println "exception $e"
    }
    print(links)
    return links
}

ext.generateCustomData = { clientId ->
    String links = ""
    try {
        clientId.each { item ->
            links += customData(item)
        }
    } catch (Exception e) {
        println "exception $e"
    }
    print(links)
    return links
}

ext.generateMeta = { indexedClientId ->
    String links = ""
    try {
        indexedClientId.each { clientId, index ->
            links += metaData(clientId, index)
        }
    } catch (Exception e) {
        println "exception $e"
    }
    return links
}

static def metaData(String clientId, Integer index) {
    String name
    if (index == 0) {
        name = "com.yandex.auth.CLIENT_ID"
    } else {
        name = "com.yandex.auth.CLIENT_ID_$index"
    }

    return "\n" +
        "        <meta-data\n" +
        "            android:name=\"$name\"\n" +
        "            android:value=\"${clientId}\"/>"
}

static def data(String clientId, String host) {
    return "\n" +
        "               <data\n" +
        "                   android:host=\"yx${clientId}.${host}\"" +
        "                   android:path=\"/auth/finish\"" +
        "                   android:scheme=\"https\"/>\n"
}

static def customData(String clientId) {
    return "\n" +
        "               <data\n" +
        "                   android:path=\"/auth/finish\"" +
        "                   android:scheme=\"yx${clientId}\"" +
        "                   tools:ignore=\"GoogleAppIndexingUrlError\"/>\n"
}

android.libraryVariants.all { variant ->
    variant.outputs.all { output ->
        output.processManifest.doLast {
            def placeholders = variant.mergedFlavor.manifestPlaceholders;
            if (placeholders == null || placeholders.isEmpty()) {
                return
            }
            def buildType = "${variant.getFlavorName()}${variant.buildType.name}"
            String manifestDir = "build/intermediates/merged_manifest/$buildType"
            String manifestFilePath = "$manifestDir/AndroidManifest.xml"
            def link = manifestFilePath
            link = link.replace("merged_manifests", "bundle_manifest")
            try {
                writeManifest(manifestFilePath, placeholders)
                writeManifest(link, placeholders)
            } catch (Exception e) {
                println "Error while writing deep link into manifest $e.message"
            }
        }
    }
}

def writeManifest(String manifestPath, HashMap placeholders) {
    def manifestContent = file(manifestPath).getText()
    placeholders.each { key, value ->
        if (key.equals("deepLinks_manifestPlaceholder")) {
            Pattern pattern = Pattern.compile(Pattern.quote("deepLinks_manifestPlaceholder"), Pattern.DOTALL);
            manifestContent = pattern.matcher(manifestContent).replaceAll(value);
        }

        if (key.equals("metaData_manifestPlaceholder")) {
            Pattern pattern = Pattern.compile(Pattern.quote("metaData_manifestPlaceholder"), Pattern.DOTALL);
            manifestContent = pattern.matcher(manifestContent).replaceAll(value);
        }
        if (key.equals("deepLinks_custom_manifestPlaceholder")) {
            Pattern pattern = Pattern.compile(Pattern.quote("deepLinks_custom_manifestPlaceholder"), Pattern.DOTALL);
            manifestContent = pattern.matcher(manifestContent).replaceAll(value);
        }

    }
    file(manifestPath).write(manifestContent)
}
